---
description:
globs:
alwaysApply: false
---
- **Prioritize Centralized ABIs**
    - Always check `src/types/contracts.ts` for existing ABI definitions (e.g., `poolAbi`, `tokenAbi`) before creating new ABI files or constants.
    - If a suitable ABI exists in `[contracts.ts](mdc:src/types/contracts.ts)`, import and use it.

- **Importing Existing ABIs**
    - **DO**: Import from the central file:
      ```typescript
      import { tokenAbi } from '@/types/contracts';
      // ...
      const { data } = useReadContract({
        abi: tokenAbi,
        // ...
      });
      ```
    - **DON'T**: Create new ABI files or constants if a suitable one exists.
      ```typescript
      // ❌ DON'T create a new file like src/lib/abis/erc20Abi.ts if tokenAbi in contracts.ts is sufficient.
      // ❌ DON'T define a new const erc20Abi = [...] in your component.
      ```

- **When a New ABI is Necessary**
    - If an ABI for a *new, distinct* contract is needed and does not exist in `[contracts.ts](mdc:src/types/contracts.ts)`:
        - The preferred method is to have it generated by `wagmi-cli` and added to `[contracts.ts](mdc:src/types/contracts.ts)`.
        - If manual addition is required, add the new ABI to `[contracts.ts](mdc:src/types/contracts.ts)` following the existing structure, rather than creating a separate file.
        - Ensure it's exported and properly typed (e.g., `as const`).
