<context>
# Overview  
Pool is a Farcaster mini-app that enables creators to organize event pools and giveaways for their community on-chain. The platform solves the problem of community engagement and reward distribution by providing a seamless interface for creating, managing, and participating in pools backed by smart contracts. It's designed for Farcaster users who want to create trustless, transparent engagement-driven events or distribute rewards to their community in a decentralized way.

# Core Features  
## Smart Contract Integration
1. **Pool Contract SDK Layer**
   - What: A set of hooks and utilities for interacting with the Pool smart contract
   - Why: Enables seamless interaction with on-chain pools without complex blockchain code
   - How: Using wagmi-cli generated types and custom hooks for contract functions

2. **On-Chain Pool Creation**
   - What: Enhancing the existing pool creation wizard to create pools on-chain
   - Why: Provides transparency and trustlessness to pool creation and management
   - How: Integration with the Pool smart contract's createPool function

3. **On-Chain Pool Participation**
   - What: Functionality to join pools by depositing tokens to the smart contract
   - Why: Ensures secure, verifiable participation in community pools
   - How: Integration with the deposit function of the Pool contract

4. **Prize Distribution System**
   - What: Interface for pool creators to select winners and distribute prizes
   - Why: Enables transparent and verifiable reward distribution
   - How: Integration with contract functions for winner selection and claiming

## Frame Integration Features
1. **Shareable Pool Frames**
   - What: Dynamic frame generation for created pools with join functionality
   - Why: Enables simple sharing and participation through Farcaster
   - How: Frame metadata generation with pool details and action buttons

2. **Pool Status Information**
   - What: Display of pool participants, balance, and status in frames
   - Why: Provides transparency about pool state directly in Farcaster
   - How: Dynamic frame content generation based on on-chain data

3. **Winner Announcement Frames**
   - What: Auto-generated frames for announcing pool winners
   - Why: Creates excitement and visibility for successful participants
   - How: Special frame templates for displaying winner information

# User Experience  
## User Personas
1. **Pool Creator**
   - Farcaster users with established communities
   - Seeking to create token-based pools or giveaways
   - Needs simple tools to create pools and distribute prizes on-chain

2. **Pool Participant**
   - Farcaster users interested in joining community pools
   - Owns or willing to acquire tokens for participation
   - Wants a simple, secure way to join and potentially win rewards

## Key User Flows
### Creator Flow:
1. Creator connects wallet through the Pool mini-app
2. Creates new pool by specifying token, amount, duration, and winners
3. Confirms transaction to deploy the pool on-chain
4. Shares the generated Frame on their Farcaster feed
5. Selects winners and distributes rewards once the pool ends

### Participant Flow:
1. User discovers a pool through a Farcaster Frame
2. Connects wallet to view pool details
3. Approves token spending and joins the pool with deposit
4. Receives notification if selected as a winner
5. Claims rewards directly to their wallet

## UX Considerations for On-Chain Interaction
- Clear transaction status and confirmation flows
- Simplified gas estimation and transaction monitoring
- Intuitive error handling and recovery paths
- Streamlined token approval and spending processes
- Educational elements explaining on-chain actions
</context>
<PRD>
# Existing Codebase Considerations
## Preservation Requirements
- **Important**: This project has an existing frontend implementation that must be preserved and extended with smart contract integration.
- The current implementation already includes OnchainKit and MiniKit integration, color schemes, typography, and UI components.
- All new development must build upon the existing foundation without replacing or refactoring current functionality.
- The existing data models and UI structure must be maintained while adding blockchain functionality.

## Critical Preserved Components
- **OnchainKit/MiniKit Integration**: The existing provider setup and frame integration must not be modified.
- **Component Structure**: The current UI components must be enhanced rather than replaced.
- **Styling System**: Existing styles and design patterns must be followed.
- **File Structure**: The project organization pattern should be maintained, using kebab-case for new files.

## Development Approach
- Use wagmi-cli to auto-generate contract types instead of manually creating ABI files.
- Extend existing components to interact with the smart contract rather than replacing them.
- Reuse existing patterns in the codebase for new contract interaction features.
- Follow the existing naming conventions and code structure.

# Technical Architecture  
## System Components
- **Frontend**: Existing Next.js application with Tailwind CSS
- **Contract Integration**: Pool smart contract on Base network
- **Type Generation**: wagmi-cli for generating type-safe contract interactions
- **Transaction Management**: OnchainKit's Transaction component
- **Frame Integration**: MiniKit for Farcaster Frame generation and handling

## Smart Contract Integration
- **Contract Configuration**: Environment-aware contract addresses
- **Type Safety**: Auto-generated types for contract functions and events
- **Hook Layer**: Custom hooks for contract interaction using wagmi
- **Transaction Handling**: Status management for pending transactions
- **Error Handling**: User-friendly error messages for contract interactions

## Data Flow
- **Local to On-Chain**: Synchronizing UI state with blockchain state
- **Event Listening**: Reacting to contract events for UI updates
- **Caching Strategy**: Efficient data fetching and caching from blockchain
- **Offline Support**: Graceful handling of network disconnections

## Implementation Considerations
- **Gas Optimization**: Efficient transaction batching and timing
- **Contract Call Batching**: Minimizing separate blockchain calls
- **Error Recovery**: Transaction retry mechanisms and error handling
- **Multi-wallet Support**: Compatibility with various wallet providers

# Development Roadmap  
## Phase 1: Contract Integration Foundation
- Configure wagmi-cli and generate contract types
- Create basic contract hooks for essential functions
- Update existing data models to include on-chain data
- Implement contract address configuration

## Phase 2: User Interface Enhancement
- Extend PoolCard to display on-chain pool data
- Modify CreatePoolWizard to interact with contract
- Implement JoinPoolForm for on-chain deposits
- Create transaction status components

## Phase 3: Frame Integration
- Create dynamic frame generation with pool data
- Implement join pool action in frames
- Build winner announcement frame templates
- Add frame webhook handlers for pool actions

## Phase 4: Advanced Features
- Implement winner selection interface
- Create prize distribution dashboard
- Add sponsorship functionality
- Develop pool analytics with on-chain data

# Logical Dependency Chain
1. **Contract SDK Layer**
   - Configure wagmi-cli and generate types
   - Create base contract hooks
   - Implement transaction status management

2. **Core Pool Interactions**
   - Extend pool creation to interact with contract
   - Implement pool joining functionality
   - Create token approval flow

3. **Frame Enhancement**
   - Upgrade frame generation with on-chain data
   - Implement frame action handlers
   - Create dynamic frame content templates

4. **Admin Features**
   - Build winner selection interface
   - Implement prize distribution
   - Create pool management dashboard

# Risks and Mitigations  
## Technical Challenges
- **Risk**: Contract interactions failing due to gas issues or network congestion
  **Mitigation**: Implement robust error handling and retry mechanisms

- **Risk**: Inconsistency between UI state and blockchain state
  **Mitigation**: Use event listeners and polling for synchronization

- **Risk**: Complex transaction flows confusing users
  **Mitigation**: Create simplified transaction UIs with clear status indicators

## Implementation Constraints
- **Risk**: Maintaining performance with blockchain data fetching
  **Mitigation**: Implement efficient caching and background loading

- **Risk**: Supporting multiple wallet types seamlessly
  **Mitigation**: Leverage OnchainKit's wallet management capabilities

## Security Considerations
- **Risk**: Users approving incorrect token amounts
  **Mitigation**: Clear confirmation screens with amount validation

- **Risk**: Smart contract vulnerabilities
  **Mitigation**: Security testing and auditing of contract interactions

# Appendix  
## Smart Contract Details
- **Pool Contract**: Handles pool creation, participant joining, and winner selection
- **Token Management**: ERC-20 token for deposits and rewards
- **Security Mechanisms**: Admin role control and emergency functions

## Integration Notes
- Use wagmi-generated types for type safety
- Follow kebab-case naming convention for all new files
- Leverage existing provider setup from MiniKit
- Use existing UI components and extend as needed 